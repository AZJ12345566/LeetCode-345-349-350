class Solution {
/*
345.反转字符串中的元音字母
给你一个字符串 s ，仅反转字符串中的所有元音字母，并返回结果字符串。
元音字母包括 'a'、'e'、'i'、'o'、'u'，且可能以大小写两种形式出现不止一次。
*/
  public String reverseVowels(String s) {
    int left = 0;
    int right = s.length() - 1;
    char[] arr = s.toCharArray();
    while(left < right) {
      while(left < right && !isVowel(arr[left])) {
        left++;
      }
      while(left < right && !isVowel(arr[right])) {
        right--;
      }
      char temp = arr[left];
      arr[left] = arr[right];
      arr[right] = temp;
      left++;
      right--;
    }
    return new String(arr);
  }
  public boolean isVowel(char ch) {
    return "aeiouAEIOU".indexOf(ch) >= 0;
  }
/*
349.两个数组的交集
给定两个数组 nums1 和 nums2 ，返回 它们的 
交集。输出结果中的每个元素一定是 唯一 的。我们可以 不考虑输出结果的顺序 。
*/
  public int[] intersection(int[] nums1, int[] nums2) {
    Arrays.sort(nums1);
    Arrays.sort(nums2);
    int length1 = nums1.length;
    int length2 = nums2.length;
    int[] arr = new int[length1 + length2];
    int index1 = 0;
    int index2 = 0;
    int j = 0;
    while(index1 < length1 && index2 < length2) {
      if(nums1[index1] == nums2[index2]) {
        if(j == 0 || arr[j - 1] != nums1[index1]) {
          arr[j++] = nums1[index1];
        }
        index1++;
        index2++;
      } else if(nums1[index1] < nums2[index2]) {
        index1++;
      } else {
        index2++;
      }
    }
    return Arrays.copyOfRanger(arr, 0, j);
  }
/*
350.两个数组的交集II
给你两个整数数组 nums1 和 nums2 ，请你以数组形式返回两数组的交集。返回结果中每个元素出现的次数，应与元素在两个数组中都出现的次数一致（如果出现次数不一致，则考虑取较小值）。可以不考虑输出结果的顺序。
*/
  public int[] intersect(int[] nums1, int[] nums2) {
    Arrays.sort(nums1);
    Arrays.sort(nums2);
    int length1 = nums1.length;
    int length2 = nums2.length;
    int[] arr = new int[length1 + length2];
    int index1 = 0;
    int index2 = 0;
    int j = 0;
    while(index1 < length1 && index2 < length2) {
      if(nums1[index1] == nums2[index2]) {
        arr[j++] = nums1[index1];
        index1++;
        index2++;
      } else if(nums1[index1] < nums2[index2]) {
        index1++;
      } else {
        index2++;
      }
    }
    return Arrays.copyOfRange(arr, 0, j);
  }
}
